1.Что такое переменная? 
Переменная – это «именованное хранилище» для данных.

2.Как объявить переменную? Как инициализировать переменную? Примеры кода
var / let / const
let a = 1;
var b;
b = "2";

let c = null,
  d = {};

const a = 1n;

3.Виды циклов ( 3 вида )? Примеры использования
While - Цикл с предусловием
do...while-Цикл с постусловием
for-цикл со счётчиком
4.Сколько и какие типы данных в javascript? Примеры создания переменных каждого типа
8:undefined let year;

null let year = null;

boolean let fileExist = true;

string let helloString = "Hello, world!"

number let num = 2;

object let user = {name: "Вася", role: "Администратор"};

symbol let id = Symbol("id");

bigint const num = 9999999999999999n;

5.Как узнать тип переменной? Пример кода
знать про тип переменной можно при помощи оператора typeof
typeof 0;
6.Что такое область видимости? Какие бывают?
Областью видимости в JavaScript называют часть программы, в пределах которой компьютер видит набор всех созданных переменных, функций и других данных, и может к ним обратиться.
Базово разделить область видимости можно на глобальную и локальную. 

7.Как из javascript в браузере вывести на экран строчку? ( 4-ре способа ) Примеры кода
	1.Document.writeln("Hello, world);
	2.alert("Hello, world);
	3.console.log("Hello, world);
	4.<div class="message"></div>
	  document.querySelector(".message").innerHTML = "Hello";

8.Каким образом можно реализовать условное выполнение кода?
С помощию условных операторов 
9.Условные операторы в javascript - какие? Примеры использования
	1. if/else
	if (someFlag) {
  		console.log("Ho ho ho");
	} else {
  		console.log("No no no");
	}
	2.Switch
	let a = 2 + 2;

	switch (a) {
  		case 2: // группировка
  		case 3:
    			alert("Маловато");
    			break;
  		case 4:
    			alert("В точку!");
   			 break;
  		case 5:
    			alert("Перебор"); // затронет и следующее действие
  		default:
    			alert("Давай попробуем еще раз");
}	
10.Что такое тернарный оператор?
Условный (тернарный) оператор - единственный оператор в JavaScript, принимающий три операнда: условие, за которым следует 
знак вопроса (?), затем выражение, которое выполняется, если условие истинно, сопровождается двоеточием (:), и, наконец, выражение, которое выполняется, 
если условие ложно.
11.Как обойтись без условных операторов если нужно сделать условное выполнение кода? С примером
	с помощью логических операторов:
// Первый же false-like результат прерывает цепочку &&
const x = someFlag && runOnlyIfFlagIsTrue();

someFlag && condition && runOnlyIfFlagIsTrue();

// Первый же true-like результат прерывает цепочку ||
const y = someAnotherFlag || runOnlyIfAnotherFlagIsFalse();

someAnotherFlag || runOnlyIfAnotherFlagIsFalse();

12.Что такое функция? Какими характеристиками можно описать функцию?
Функция — это самостоятельный блок кода, который можно, один раз объявив, вызывать столько раз, сколько нужно. 
Функция может, хотя это и необязательно, принимать параметры. Функции возвращают единственное значение.

13.Как можно создать функцию? 3 способа. C примерами кода
	1.const absValue = (number) => {
  if (number < 0) {
    return -number;
  }
  return number;
}
	2.function isEven(num) {
  return num % 2 === 0;
}
isEven(24);  // => true
isEven(11);  // => false
	3.const myFunctionVar = function(variable) { 
  return typeof variable; 
};
myFunctionVar.name;  // => 'myFunctionVar'
14.Что такое объект? Как создать объект? ( 3 способа ) С примерами кода
Объект — это набор свойств, и каждое свойство состоит из имени и значения, ассоциированного с этим именем.
	1.const cat = {
  name: 'Том',
  meow: function () {
    console.log('мяу мяу')
  },
}	
cat.meow()
// мяу мяу
	2.const cat = {}
cat.name = 'Simon'
cat.gender = 'male'
cat.color = 'brown'
cat.age = 2
cat.adorable = true

console.log(cat)
// {
//   name: 'Simon',
//   gender: 'male',
//   color: 'brown',
//   age: 2,
//   adorable: true
// }
	3.const book = new Object({ title: 'Война и мир', author: 'Лев Толстой' })

15.Что такое минификация и зачем она нужна?
	Минимизация - это процесс "минимизации" кода путем удаления нерелевантных частей кода.
16.Как можно добавить javascript код в html страницу? 2 способа. C примерами кода
	1.<script src="/scripts/script.js"></script>
	2.<!DOCTYPE html>
<html>
<head>

<script>
    function myFunction() {
    document.getElementById("demo").innerHTML = "Привет, javascript!";
    }
</script>

</head>
<body>

<p id="demo">Привет, мир!</p>
<button type="button" onclick="myFunction()">Кликни меня</button>

</body>
</html>
17.Что такое массив?
	Массивы представляют собой спископодобные структуры, которые предназначены для хранения упорядоченных данных. 
18.Как создать массив? ( 3 способа ) С примером кода
	let arr = new Array();
	let arr = [];
	let fruits = ["Apple", "Orange", "Plum"];

19.Как запросить данные у пользователя? с примером кода
	console.log(prompt("Enter another value:"));
	console.log(confirm("Are you sure?")); 
20.Почему 1 + '2' ? и 1 - '2' ?
12, -1
21.Как и когда работает преобразование типов?
	Преобразование типов может быть явным и неявным. Когда разработчик выражает намерение сконвертировать значение одного типа в значение другого типа, 
	записывая это соответствующим образом в коде, скажем, в виде Number(value), это называется явным приведением типов (или явным преобразованием типов).
	Три вида преобразования типов: В строку (String) В логическое значение (Boolean) В число (Number)
22.Что такое HTTP ? Из чего состоит HTTP протокол?
	HTTP — это протокол, позволяющий получать различные ресурсы, например HTML-документы.
HTTP состоит из двух элементов: клиента и сервера. Клиент отправляет запросы и ждёт данные от сервера. 
А сервер ждёт, пока ему придёт очередной запрос, обрабатывает его и возвращает ответ клиенту. Так взаимодействуют клиент и сервер.
23.Какие есть методы HTTP запросов? Для чего каждый?
	Метод GET запрашивает представление ресурса. Запросы с использованием этого метода могут только извлекать данные.
	HEAD запрашивает ресурс так же, как и метод GET, но без тела ответа.
	POST используется для отправки сущностей к определённому ресурсу. Часто вызывает изменение состояния или какие-то побочные эффекты на сервере.
	PUT заменяет все текущие представления ресурса данными запроса.
	DELETE удаляет указанный ресурс.
	CONNECT устанавливает "туннель" к серверу, определённому по ресурсу.
	OPTIONS используется для описания параметров соединения с ресурсом.
	TRACE выполняет вызов возвращаемого тестового сообщения с ресурса.
	PATCH используется для частичного изменения ресурса.
24.Что такое REST ? RPC ?
	REST - (сокр. от англ. Representational State Transfer — «передача состояния представления») 
	архитектурный стиль взаимодействия компонентов распределённого приложения в сети по модели клиент-сервер.
	RPC (Remote Procedure Call) - это механизм взаимодействия клиентского и серверного приложений, в котором клиенты вызывают функции сервера. Для клиента это выглядит как вызов локальной функции, 
 	но на самом деле вызов передается средой исполнения RPC (RPC runtime) серверу, который исполняет функцию и возвращает результаты клиенту.
24.Что такое "линтер" (linter)? Зачем они нужны? Какие линтеры есть для javascript?
	 Линтер — это программа, которая автоматизирует всю эту возню и сама «причёсывает» код по определённым правилам. Линтер на основании заданных правил перерабатывает код за секунду:
	расставляет нужные табы и пробелы;
	проставляет точки с запятой и скобки в нужных местах;
	в HTML делает красивую вложенную структуру тегов и выносит стили из тегов в отдельный блок в <style>;	
	убирает лишние пробелы и пустые строки.
25.Что такое "jsdoc" ? Найдите его в своем домашнем задании.
	JSDoc - это язык разметки. 
26.Зачем он нужен? Объясните использованные теги.
	используемый для аннотирования исходного кода JavaScript с использованием комментариев
27.Что такое пакетный менеджер? Какие пакетные менеджеры есть для js?
	Менеджер пакетов - это инструмент, который разработчики используют для автоматизации поиска, загрузки, установки, конфигурирования, обновления и удаления системных пакетов.
	npm , bower , volo , ringojs , component
28.Что делают системы сборки? Какие системы сборки есть для js?
	Система сборки представляет собой набор. Make - файлов и утилит, организованных в одном каталоге, который монтируется в исходное дерево разрабатываемого продукта. 
Основной задачей системы сборки является автоматизация всех этапов создания программного продукта, начиная с организации работ с архивами исходных текстов сторонних производителей 
и заканчивая выпуском собственного отчуждаемого дистрибутива.
 Grunt, Gulp, Brunch и Gear.